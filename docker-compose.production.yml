version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: guardflow_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - guardflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: guardflow_redis_prod
    restart: unless-stopped
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - guardflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'

  # FastAPI Backend
  backend:
    build: 
      context: ./guardflow-backend
      dockerfile: Dockerfile
    container_name: guardflow_backend_prod
    restart: unless-stopped
    env_file:
      - ./guardflow-backend/.env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - guardflow-network
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Celery Worker
  celery:
    build: 
      context: ./guardflow-backend
      dockerfile: Dockerfile
    container_name: guardflow_celery_prod
    restart: unless-stopped
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=2
    env_file:
      - ./guardflow-backend/.env.production
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - guardflow-network
    volumes:
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # React Frontend
  frontend:
    build: 
      context: ./guardflow-frontend
      dockerfile: Dockerfile
    container_name: guardflow_frontend_prod
    restart: unless-stopped
    networks:
      - guardflow-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: guardflow_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - guardflow-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.5'

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: guardflow_certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email admin@guardflow.tech -d guardflow.tech -d www.guardflow.tech -d app.guardflow.tech -d api.guardflow.tech --agree-tos
    profiles:
      - ssl-setup

  # Database backup service (runs daily at 2 AM)
  backup:
    image: postgres:15
    container_name: guardflow_backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    networks:
      - guardflow-network
    depends_on:
      - postgres
    command: >
      sh -c "
        echo '0 2 * * * /scripts/backup.sh' | crontab - &&
        crond -f
      "
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  guardflow-network:
    driver: bridge
    name: guardflow_production